commands = [
['acc', 6, 0],
['acc', 21, 0],
['nop', 297, 0],
['jmp', 2, 0],
['jmp', 156, 0],
['acc', -7, 0],
['acc', 6, 0],
['acc', -16, 0],
['acc', 14, 0],
['jmp', 127, 0],
['acc', 8, 0],
['acc', -16, 0],
['acc', 48, 0],
['nop', 189, 0],
['jmp', 214, 0],
['acc', 20, 0],
['acc', 25, 0],
['acc', 3, 0],
['acc', 10, 0],
['jmp', 571, 0],
['acc', -7, 0],
['acc', -16, 0],
['acc', 29, 0],
['acc', 24, 0],
['jmp', 346, 0],
['acc', 1, 0],
['acc', -11, 0],
['acc', -14, 0],
['acc', 14, 0],
['jmp', 18, 0],
['acc', -5, 0],
['acc', 22, 0],
['jmp', 351, 0],
['acc', 13, 0],
['acc', 6, 0],
['nop', -2, 0],
['acc', 20, 0],
['jmp', 405, 0],
['acc', 13, 0],
['acc', 40, 0],
['jmp', 265, 0],
['acc', 32, 0],
['acc', -3, 0],
['acc', 13, 0],
['acc', 9, 0],
['jmp', 175, 0],
['jmp', 237, 0],
['nop', 113, 0],
['jmp', 127, 0],
['acc', -10, 0],
['acc', 49, 0],
['nop', -36, 0],
['acc', 17, 0],
['jmp', 156, 0],
['nop', 181, 0],
['jmp', 419, 0],
['acc', 11, 0],
['jmp', 1, 0],
['acc', 49, 0],
['nop', 187, 0],
['jmp', 427, 0],
['nop', 568, 0],
['acc', -14, 0],
['nop', 481, 0],
['acc', 47, 0],
['jmp', 163, 0],
['jmp', 309, 0],
['jmp', 410, 0],
['acc', 23, 0],
['acc', -17, 0],
['nop', 229, 0],
['acc', -4, 0],
['jmp', 538, 0],
['acc', -12, 0],
['jmp', 200, 0],
['acc', 35, 0],
['acc', 22, 0],
['acc', -14, 0],
['acc', 46, 0],
['jmp', 388, 0],
['acc', 20, 0],
['acc', 15, 0],
['acc', 0, 0],
['acc', 26, 0],
['jmp', 197, 0],
['jmp', 267, 0],
['acc', 33, 0],
['jmp', -82, 0],
['acc', 44, 0],
['acc', -19, 0],
['jmp', 42, 0],
['acc', 14, 0],
['jmp', 1, 0],
['jmp', 263, 0],
['acc', -18, 0],
['jmp', 80, 0],
['acc', -12, 0],
['jmp', 248, 0],
['acc', 0, 0],
['acc', 44, 0],
['acc', 6, 0],
['jmp', 134, 0],
['jmp', 1, 0],
['acc', 2, 0],
['acc', 38, 0],
['jmp', 40, 0],
['acc', 30, 0],
['acc', -1, 0],
['jmp', 141, 0],
['jmp', 1, 0],
['jmp', 460, 0],
['nop', 241, 0],
['acc', 34, 0],
['acc', 35, 0],
['jmp', 1, 0],
['jmp', -6, 0],
['nop', 172, 0],
['acc', 6, 0],
['nop', 299, 0],
['jmp', 298, 0],
['acc', 20, 0],
['nop', 52, 0],
['acc', 47, 0],
['acc', 32, 0],
['jmp', 293, 0],
['acc', 22, 0],
['acc', -4, 0],
['jmp', 417, 0],
['acc', -8, 0],
['jmp', 276, 0],
['jmp', 452, 0],
['jmp', 381, 0],
['acc', 0, 0],
['nop', -79, 0],
['jmp', 101, 0],
['jmp', 253, 0],
['acc', 30, 0],
['acc', 42, 0],
['acc', 21, 0],
['jmp', 231, 0],
['acc', 35, 0],
['acc', 20, 0],
['acc', -10, 0],
['acc', -19, 0],
['jmp', 173, 0],
['jmp', 2, 0],
['jmp', -16, 0],
['acc', -8, 0],
['acc', 47, 0],
['acc', -9, 0],
['acc', 11, 0],
['jmp', -35, 0],
['acc', -2, 0],
['jmp', 121, 0],
['acc', -16, 0],
['acc', -19, 0],
['acc', 47, 0],
['acc', 34, 0],
['jmp', -11, 0],
['jmp', 34, 0],
['acc', 40, 0],
['acc', -3, 0],
['acc', -18, 0],
['nop', 359, 0],
['jmp', 9, 0],
['acc', 26, 0],
['jmp', 117, 0],
['acc', -8, 0],
['acc', -14, 0],
['jmp', 1, 0],
['jmp', 123, 0],
['nop', 117, 0],
['jmp', -63, 0],
['jmp', 13, 0],
['jmp', 227, 0],
['acc', 41, 0],
['jmp', 207, 0],
['nop', -86, 0],
['acc', 37, 0],
['acc', -15, 0],
['jmp', 55, 0],
['acc', 24, 0],
['acc', 8, 0],
['jmp', 1, 0],
['jmp', 79, 0],
['jmp', 270, 0],
['jmp', -125, 0],
['jmp', 214, 0],
['jmp', 100, 0],
['acc', -8, 0],
['acc', -19, 0],
['acc', 23, 0],
['jmp', -167, 0],
['nop', -18, 0],
['acc', -14, 0],
['acc', 19, 0],
['nop', 291, 0],
['jmp', 361, 0],
['acc', 25, 0],
['acc', 21, 0],
['nop', 99, 0],
['jmp', 229, 0],
['nop', 228, 0],
['acc', 4, 0],
['acc', 24, 0],
['jmp', -12, 0],
['jmp', 1, 0],
['acc', 26, 0],
['jmp', 75, 0],
['acc', 22, 0],
['nop', 105, 0],
['acc', 46, 0],
['acc', -8, 0],
['jmp', -81, 0],
['acc', 46, 0],
['jmp', -168, 0],
['acc', 14, 0],
['jmp', -57, 0],
['acc', -13, 0],
['jmp', 137, 0],
['nop', 362, 0],
['acc', 28, 0],
['jmp', 352, 0],
['acc', 8, 0],
['acc', 21, 0],
['acc', 30, 0],
['acc', 13, 0],
['jmp', -91, 0],
['acc', 39, 0],
['jmp', 296, 0],
['acc', 27, 0],
['acc', 16, 0],
['acc', 5, 0],
['acc', 48, 0],
['jmp', -6, 0],
['nop', -210, 0],
['acc', 29, 0],
['acc', 47, 0],
['jmp', -78, 0],
['jmp', 228, 0],
['acc', 13, 0],
['acc', -11, 0],
['acc', 3, 0],
['jmp', 96, 0],
['acc', 0, 0],
['jmp', 313, 0],
['acc', 30, 0],
['jmp', 251, 0],
['jmp', 203, 0],
['nop', -202, 0],
['nop', -177, 0],
['acc', -17, 0],
['acc', 30, 0],
['jmp', -128, 0],
['jmp', 227, 0],
['nop', 84, 0],
['acc', 21, 0],
['acc', 3, 0],
['jmp', -18, 0],
['acc', 33, 0],
['nop', -128, 0],
['nop', 368, 0],
['jmp', -87, 0],
['acc', 30, 0],
['jmp', 88, 0],
['acc', -3, 0],
['acc', 17, 0],
['jmp', 63, 0],
['acc', 37, 0],
['acc', -13, 0],
['jmp', 340, 0],
['jmp', 1, 0],
['acc', 11, 0],
['jmp', 325, 0],
['jmp', -58, 0],
['acc', 43, 0],
['jmp', 23, 0],
['jmp', 157, 0],
['acc', 35, 0],
['acc', 10, 0],
['jmp', 25, 0],
['jmp', 124, 0],
['jmp', -109, 0],
['nop', 40, 0],
['jmp', 183, 0],
['acc', 46, 0],
['acc', 37, 0],
['jmp', 88, 0],
['acc', -8, 0],
['jmp', 162, 0],
['acc', 4, 0],
['acc', 22, 0],
['jmp', 220, 0],
['acc', 32, 0],
['jmp', -214, 0],
['acc', 3, 0],
['nop', -56, 0],
['acc', 30, 0],
['jmp', -138, 0],
['acc', 22, 0],
['jmp', 329, 0],
['acc', 12, 0],
['nop', 115, 0],
['acc', 38, 0],
['jmp', -231, 0],
['acc', 9, 0],
['jmp', 1, 0],
['acc', 25, 0],
['acc', 47, 0],
['jmp', 329, 0],
['acc', 14, 0],
['nop', 220, 0],
['acc', -19, 0],
['acc', -19, 0],
['jmp', 225, 0],
['jmp', -248, 0],
['jmp', 249, 0],
['jmp', -231, 0],
['nop', -30, 0],
['acc', 26, 0],
['acc', 32, 0],
['acc', 12, 0],
['jmp', 190, 0],
['acc', 4, 0],
['jmp', -251, 0],
['acc', 20, 0],
['nop', -27, 0],
['acc', 20, 0],
['acc', 16, 0],
['jmp', -41, 0],
['acc', 21, 0],
['acc', 45, 0],
['acc', 24, 0],
['jmp', -65, 0],
['acc', 39, 0],
['acc', -9, 0],
['acc', -12, 0],
['acc', 23, 0],
['jmp', -50, 0],
['acc', 49, 0],
['nop', -105, 0],
['acc', 17, 0],
['jmp', 180, 0],
['acc', 14, 0],
['jmp', 238, 0],
['acc', 1, 0],
['nop', -285, 0],
['acc', 26, 0],
['acc', -15, 0],
['jmp', 216, 0],
['nop', -95, 0],
['jmp', 60, 0],
['jmp', -261, 0],
['acc', 49, 0],
['acc', 31, 0],
['jmp', 210, 0],
['jmp', 1, 0],
['acc', -5, 0],
['jmp', -304, 0],
['acc', 48, 0],
['acc', 0, 0],
['nop', 2, 0],
['jmp', -347, 0],
['acc', 50, 0],
['jmp', 148, 0],
['acc', 5, 0],
['nop', -193, 0],
['acc', -5, 0],
['acc', 0, 0],
['jmp', 221, 0],
['acc', 39, 0],
['acc', -14, 0],
['jmp', 39, 0],
['acc', 24, 0],
['jmp', -100, 0],
['acc', 0, 0],
['acc', -16, 0],
['acc', 4, 0],
['jmp', -190, 0],
['acc', 21, 0],
['acc', -2, 0],
['acc', -16, 0],
['jmp', 162, 0],
['jmp', 28, 0],
['acc', 26, 0],
['acc', 19, 0],
['acc', -5, 0],
['jmp', -362, 0],
['acc', -16, 0],
['nop', -6, 0],
['jmp', -223, 0],
['jmp', 101, 0],
['acc', -7, 0],
['acc', -10, 0],
['acc', -16, 0],
['jmp', -146, 0],
['nop', 126, 0],
['acc', -18, 0],
['acc', 25, 0],
['nop', -232, 0],
['jmp', 61, 0],
['jmp', -86, 0],
['acc', -9, 0],
['nop', -20, 0],
['jmp', -318, 0],
['jmp', -90, 0],
['nop', -315, 0],
['acc', 33, 0],
['acc', 0, 0],
['acc', 18, 0],
['jmp', 41, 0],
['jmp', 1, 0],
['jmp', 8, 0],
['acc', 4, 0],
['acc', 13, 0],
['acc', -19, 0],
['jmp', -128, 0],
['acc', 46, 0],
['jmp', -322, 0],
['jmp', -404, 0],
['acc', -3, 0],
['acc', 24, 0],
['acc', 5, 0],
['nop', 159, 0],
['jmp', -322, 0],
['acc', -10, 0],
['acc', -18, 0],
['acc', 42, 0],
['acc', 44, 0],
['jmp', -130, 0],
['acc', -4, 0],
['acc', 4, 0],
['jmp', -302, 0],
['jmp', 18, 0],
['acc', -3, 0],
['acc', -18, 0],
['acc', 29, 0],
['acc', 36, 0],
['jmp', -405, 0],
['acc', 15, 0],
['nop', 91, 0],
['jmp', 98, 0],
['acc', -14, 0],
['nop', 88, 0],
['acc', 16, 0],
['jmp', 86, 0],
['acc', -14, 0],
['acc', 20, 0],
['acc', -10, 0],
['nop', -7, 0],
['jmp', 81, 0],
['jmp', 74, 0],
['acc', 3, 0],
['acc', 18, 0],
['jmp', -294, 0],
['acc', 16, 0],
['jmp', -173, 0],
['nop', 65, 0],
['acc', 31, 0],
['acc', -14, 0],
['jmp', -77, 0],
['acc', 16, 0],
['nop', -415, 0],
['jmp', -33, 0],
['acc', 41, 0],
['nop', -398, 0],
['jmp', 46, 0],
['acc', 50, 0],
['acc', 7, 0],
['acc', -19, 0],
['nop', -15, 0],
['jmp', -317, 0],
['acc', 38, 0],
['jmp', -298, 0],
['acc', -3, 0],
['jmp', -273, 0],
['jmp', -120, 0],
['nop', 10, 0],
['acc', 26, 0],
['jmp', 39, 0],
['jmp', -348, 0],
['nop', -204, 0],
['acc', 0, 0],
['acc', 0, 0],
['nop', -179, 0],
['jmp', -208, 0],
['jmp', -52, 0],
['nop', -299, 0],
['acc', 36, 0],
['acc', 14, 0],
['jmp', 108, 0],
['jmp', -476, 0],
['jmp', -283, 0],
['acc', 31, 0],
['acc', 33, 0],
['acc', 32, 0],
['acc', -13, 0],
['jmp', -295, 0],
['acc', 42, 0],
['acc', 27, 0],
['jmp', -112, 0],
['acc', 37, 0],
['acc', 22, 0],
['acc', 34, 0],
['jmp', -236, 0],
['acc', -2, 0],
['acc', 33, 0],
['nop', 75, 0],
['nop', -503, 0],
['jmp', -146, 0],
['nop', -324, 0],
['jmp', -148, 0],
['acc', 39, 0],
['jmp', -112, 0],
['acc', 32, 0],
['acc', -15, 0],
['acc', -5, 0],
['jmp', 8, 0],
['acc', 30, 0],
['jmp', -196, 0],
['acc', 5, 0],
['jmp', -361, 0],
['acc', 29, 0],
['jmp', -153, 0],
['jmp', -26, 0],
['jmp', -344, 0],
['acc', 39, 0],
['acc', 25, 0],
['nop', -153, 0],
['acc', 34, 0],
['jmp', -79, 0],
['nop', -97, 0],
['nop', -90, 0],
['acc', 21, 0],
['acc', -16, 0],
['jmp', 4, 0],
['acc', 41, 0],
['jmp', 1, 0],
['jmp', -233, 0],
['acc', 37, 0],
['jmp', -235, 0],
['acc', 41, 0],
['acc', 44, 0],
['jmp', -12, 0],
['nop', 1, 0],
['acc', -18, 0],
['jmp', 74, 0],
['acc', 49, 0],
['nop', -30, 0],
['acc', -17, 0],
['jmp', -364, 0],
['acc', -13, 0],
['acc', 50, 0],
['jmp', -223, 0],
['nop', -507, 0],
['acc', 17, 0],
['acc', 2, 0],
['jmp', -302, 0],
['acc', 29, 0],
['jmp', -8, 0],
['acc', 33, 0],
['nop', -514, 0],
['acc', 15, 0],
['acc', 31, 0],
['jmp', -189, 0],
['nop', -98, 0],
['acc', 47, 0],
['acc', 21, 0],
['jmp', -322, 0],
['jmp', -77, 0],
['jmp', -555, 0],
['acc', 44, 0],
['nop', -142, 0],
['jmp', -96, 0],
['acc', 45, 0],
['acc', 44, 0],
['nop', -121, 0],
['jmp', -322, 0],
['acc', 35, 0],
['acc', 48, 0],
['acc', 0, 0],
['jmp', -393, 0],
['jmp', 1, 0],
['acc', 0, 0],
['nop', -356, 0],
['jmp', -512, 0],
['acc', 31, 0],
['acc', -10, 0],
['acc', 37, 0],
['jmp', -71, 0],
['acc', 25, 0],
['acc', -8, 0],
['jmp', -200, 0],
['acc', -7, 0],
['acc', -12, 0],
['acc', 0, 0],
['acc', -16, 0],
['jmp', -369, 0],
['acc', 14, 0],
['acc', 11, 0],
['acc', 35, 0],
['jmp', -510, 0],
['jmp', -472, 0],
['acc', 39, 0],
['acc', 27, 0],
['acc', 50, 0],
['nop', -360, 0],
['jmp', -498, 0],
['acc', 13, 0],
['jmp', -500, 0],
['acc', -17, 0],
['acc', 11, 0],
['acc', 10, 0],
['acc', 7, 0],
['jmp', -11, 0],
['acc', 6, 0],
['acc', 30, 0],
['acc', 25, 0],
['acc', -19, 0],
['jmp', -373, 0],
['acc', -4, 0],
['acc', 19, 0],
['nop', -329, 0],
['jmp', -582, 0],
['acc', 11, 0],
['acc', 26, 0],
['acc', -1, 0],
['acc', 35, 0],
['jmp', -548, 0],
['nop', -59, 0],
['nop', -576, 0],
['acc', 27, 0],
['jmp', -145, 0],
['acc', -7, 0],
['acc', 41, 0],
['nop', -272, 0],
['acc', 35, 0],
['jmp', -170, 0],
['acc', -6, 0],
['acc', -4, 0],
['acc', 33, 0],
['acc', 33, 0],
['jmp', 1, 0]]


# print(len(commands))


test = [
['nop', 0, 0],
['acc', 1, 0],
['jmp', 4, 0],
['acc', 3, 0],
['jmp', -3, 0],
['acc', -99, 0],
['acc', 1, 0],
['jmp', -4, 0],
['acc', 6, 0]]

[
['nop', 0, 1], 
['acc', 1, 1], 
['jmp', 4, 1], 
['acc', 3, 1], 
['jmp', -3, 1], 
['acc', -99, 0], 
['acc', 1, 1], 
['jmp', -4, 1], 
['acc', 6, 0]]


def find_loop(list):
  running_count = 0
  index_to_check = 0
  
  def count(list):
    count = 0
    for x in list:
      count += x[2]
    return count

  while count(list) < len(list):
    x = list[index_to_check]
    if index_to_check == len(list) - 1:
      if list[-1][0] == 'acc':
        running_count += list[-1][1]
      return ['break', running_count]
    elif x[2] == 1: 
      return ['loop', running_count]  
    elif x[0] == 'acc':
      running_count += x[1]
      x[2] += 1
      index_to_check += 1
      # print([running_count], [index_to_check], [x])
    elif x[0] == 'jmp':
      x[2] += 1
      index_to_check += x[1]
      # print([running_count], [index_to_check], [x])
    elif x[0] == 'nop':
      x[2] += 1
      index_to_check += 1
      # print([running_count], [index_to_check], [x])

print(find_loop(test))
print(find_loop([['nop', 0, 1], ['acc', 1, 1], ['jmp', 4, 1], ['acc', 3, 1], ['jmp', -3, 1], ['acc', -99, 0], ['acc', 1, 1], ['jmp', -4, 1], ['acc', 6, 0]]))
# print(find_loop(commands))




def find_break_2(array):
  i = 0
  
  while i < len(array):
    x = array[i]
    if x[0] == 'nop':
      x = ['jmp', x[1], x[2]]
      new_array = array.copy()
      new_array[i:i+1] = [x]
      print(new_array)
      # print(find_loop(new_array))
      i += 1
    
    elif x[0] == 'jmp':
      x = ['nop', x[1], x[2]]
      new_array = array.copy()
      new_array[i:i+1] = [x]
      print(new_array)
      # print(find_loop(new_array))
      i += 1
    
    elif x[0] == 'acc':
      i += 1
  return 'end'
    

print(find_break_2(test))
